% Just Enough Haskell to be Dangerous
% Jeff Foster
% ACCU 2014

# About me!
- I'm Head of Software Engineering at Red Gate
- Love learning new languages, tools and techniques
- You can find me on Twitter as @fffej
- Some Haskell related stuff on <http://www.fatvat.co.uk>

# Why Haskell?
- Purely functional, statically typed, lazy language
- Is 20XX the year of FP? (we've been saying this for a while)
- Great support for concurrency and parallelism
- A completely new paradigm coming from the {} background

> A language that doesn't affect the way you think about programming is not worth knowing. (Alan Perlis)

# Why Statically Typed?
>- Given the type signature below, what happens?

. . .

~~~~
   int add(int x,int y);
~~~~

>- Add two integers?  Maybe...  Or maybe

. . .

~~~~
   int add(int x,int y) { launchNukes(); return x+y; };
~~~~

# Haskell types
>- Given the type signature below, what happens?

. . . 

~~~~
   add :: Int -> Int -> Int
~~~~

>- What can happen?

# Prequisites
- A text editor
- A version of the Haskell Platform <http://www.haskell.org/platform/>
- A git clone of <https://github.com/fffej/haskell-workshop> (or the USB stick I've hopefully remembered)

# Goals of today's session
>- You'll the basics of Haskell
>- You'll learn to read Haskell
>- You'll learn how to combine simple functions analysing Premier League results

# Let's check everything is working.

- Put the following in `Main.hs`

~~~~
   module HelloWorld where
   main = putStrLn "Hello, World!"
~~~~

- Each Haskell function is within a module
- `main` is the entry point
- Load this into ghci with `:l Main.hs` and run with `main`

<!-- 
     Quick stop to let everyone find out that Haskell works for them 
     5 minutes?  Hopefully enough people have working machines!
-->

# GHCI
- GHCI is the de-facto Haskell interpreter
- Provides a read-eval-print loop (REPL) and a way to talk with the compiler
- Start ghci with `ghci -Wall` (enables all warnings)
- For this workshop, work in a file and use `:l <file>` to load the file
- All examples can be found in the `examples` folder of the git-repo

# Exploring Syntax

~~~~
  module Add where

  -- function definition
  add x y = x + y

  -- local values
  add2 x y = z
    where 
      z = x + y -- local to the function declarations

  -- Pattern matching
  add3 0 y = y
  add3 x 0 = x
  add3 x y = 1 + add3 (x - 1) y

  -- Guards 
  add4 x y 
    | isZero x  = y -- read "|" as "where"
    | isZero y  = x
    | otherwise = 1 + add4 (x - 1) y
    where
      isZero z = z == 0
  
~~~~

# Haskell Type Signatures
- A type signature defines the shape of data a function accepts and the output it produces
- We can use ghci to inspect types 
- `:t <expression>` tells you the type of an expression

~~~~
  > :t not
   not :: Bool -> Bool
~~~~

- `not` is of type `Bool` yielding a `Bool`

# Functions with Multiple Arguments
- All functions in Haskell are really only of one argument
- Let's consider a function like `add`
- `add :: Int -> Int -> Int`
- `add` is a function that takes a `Int` yielding `Int -> Int` 

~~~~
    > add 3 4 
     7
    
    > (add 3) 4
     7

    > :t add 3
      Num a => a -> a
~~~~

# Type Variables
- Lower case indicates a type variable for polymorphic functions (like generics in C#/Java)
- `a -> a` is defined for any type (no constraint)
- `Foo a => a -> a` is defined for any type `a` that is a member of the `Foo` type class

~~~~
  > :t reverse
  reverse :: [a] -> [a]

  > t: (+)
  (+) :: Num a => a -> a -> a
~~~~


# Type Classes
- As a first approximation, think of a type class as an interface
- Common type classes are `Eq` and `Show` which define equality and printability
- Use `:i <Type/TypeClass>` to inspect a type class in ghci

~~~~
  > :i Eq
  class Eq a where
    (==) :: a -> a -> Bool
    (/=) :: a -> a -> Bool
    -- etc
~~~~


# Interpreting Type Signatures
- What do these functions do?

~~~~
    quz :: Int -> Int -> Int
   
    foo :: a -> b -> a

    bar :: a -> a
    
    baz :: Eq a => a -> [a] -> Bool
~~~~

<!--
  The more general the type signature, the *more* it can tell you!
-->

# Building your own types

- Data types are constructed and deconstructed via *type constructors*

~~~~
    module SimpleTypes where

    -- Game is the type
    -- GameC is the type constructor   
    data Game = GameC String Int String Int

    game :: Game
    game = GameC "Man Utd" 5 "Chelsea" 0

    -- Function type signatures use the type, not the type constructor
    result :: Game -> String

    -- Function definitions "Deconstruct" values with the type constructor
    result (GameC t1 s1 t2 s2)
      | s1 > s2   = t1 ++ " wins" -- what type is (++)?  What does it do?
      | s2 > s1   = t2 ++ " wins"
      | otherwise = "Draw"
~~~~

# Record Syntax

- Provides a way of naming parts of a type
- Automatically generates "getter" functions

~~~~
    module RecordSyntax where

    data Game = GameC {
    	homeTeam :: String -- homeTeam :: Game -> String
      , homeScore :: Int   -- homeScore :: Game -> Int
      , awayTeam :: String -- awayTeam :: Game -> String
      , awayScore :: Int   -- awayScore :: Game -> Int
    }

    game :: Game
    game = GameC { homeTeam = "Man Utd", homeScore = 0, awayTeam = "Bayern", awayScore = 5 }

    result :: Game -> String 
    result game
      | homeScore game > awayScore game = (homeTeam game) ++ " wins"
      | awayScore game > homeScore game = (awayTeam game) ++ " wins"
      | otherwise                       = "Draw"          	   

~~~~

# Updating Records
- Haskell types are immutable, so to change a data structure we build a new copy
- Record syntax has neat syntax to update only particular values

~~~~
    homeTeamScores :: Game -> Game
    homeTeamScores game = game { homeScore = homeScore game + 1 }
~~~~

# Sum Types
- A sum type can be one of many possibilities
- The simplest example is probably `Bool` which is either `True` or `False`

~~~~
    module SumTypes where

    -- "deriving" is a language feature providing default 
    -- implementation of some type classes (Eq,Ord,Enum,Bounded,Show,Read)
    -- Inspect these using ghci to get an ieda of what these type classes do
    data Result = Win | Lose | Draw deriving (Show)

    homeTeamResult :: Game -> Result
    homeTeamResult game
      | homeScore game > awayScore game = Win
      | awayScore game > homeScore game = Lose
      | otherwise                       = Draw
    
    flipResult :: Result -> Result
    flipResult Win  = Lose
    flipResult Lose = Win
    flipResult Draw = Draw
~~~~

# Let's define our own data types and functions

- Our domain is football matches.
- `PremierLeague/FootballStats.hs` contains a giant messy type

~~~~
    data GameResult = GameResult 
      {
        homeTeam :: String
      , awayTeam :: String
      , homeGoals :: Int
      , awayGoals :: Int
      -- and so on!
     } deriving (Show,Eq)

   -- Define a few simple functions such as
   totalGoals :: GameResult -> Int
   homeScore :: GameResult -> Int
   netGoals :: GameResult -> Int
   violenceLevel :: GameResult -> Int

   -- Define a data type to represent a league table entry
   -- including team name, wins, draws and losses
~~~~

<!--
  Let's say 15 minutes for defining a few types

  And now since we've written some simple functions, we should
  focus on how to combine them across many items
-->

# Data Types and Functions

- Hopefully you came up with something similar to this

~~~~
  data LeagueEntry = LeagueEntry {
    team :: String
  , wins :: Int
  , losses :: Int
  , draws :: Int
  }

  totalGoals g = homeGoals g + awayGoals g -- and so on
~~~~

- We can write simple functions, great!
- But how do we combine these functions?


# Haskell Lists
- Lists have special syntax in Haskell
- `[]` is the empty list
- `:` is the infix type constructor used to create lists `1 : [] => [1]`
- `[1,2,3]` is syntactic sugar for `1 : (2 : (3 : []) )`

# Thinking Recursively
- Recursive thinking consists of two steps:
- What's the base case?
- What's the recursive case that brings us nearer the base case

# List Examples (1) - Length

~~~~
   myLength :: [a] -> Int

   -- base case, an empty list is of length 0
   myLength [] = 0

   -- recursive case works towards the base case
   -- _ acts as a place holder, indicating a variable is there, but we don't care what it is
   myLength (_:xs) = 1 + length xs
~~~~

# List Examples (2) - Building new lists

- Lists are immutable; build new ones to change items

~~~~
   addOne :: [Int] -> [Int]

   -- base case
   addOne [] = []

   -- recursive case
   addOne (x:xs) = (x + 1) : (addOne xs)
~~~~

# List Examples (3) - Including only some elements

- Build a new list with only the elements we want

~~~~
   greaterThan5 :: [Int] -> [Int]
   greaterThan5 [] = []
   greaterThan5 (x:xs)
     | x > 5     = x : greaterThan5 xs
     | otherwise = greaterThan5 xs
~~~~

# Writing List functions
- What do the following functions do?

~~~~
    myContains :: Eq a => a -> [a] -> Bool
    myFilter :: (a -> Bool) -> [a] -> [a]
    myReverse :: [a] -> [a] 
    myReduce :: (a -> b -> b) -> b -> [a] -> b
~~~~

- Can you write the following functions?    
- Remember to work in terms of base case and recursive step

<!-- 
     This'll take a bit of a while, say 20 minutes 
-->

# Can we write list functions?
- Let's check our work
- Load up `code/WritingListFunctions.hs` and see how your definitions match up

# Side Step - Quick Check
- QuickCheck is a property-based testing framework
- Allows you to state invariants about your function and challenge Haskell to prove you wrong
- Demo!

# Common List Patterns

- List functions capture patterns of common abstractions such as `map`, `filter` and `fold` (aka reduce)

~~~~
    map :: (a -> b) -> [a] -> [b]
    
    filter :: (a -> Bool) -> [a] -> [a]
    
    foldr :: (a -> b -> b) -> b -> [a] -> b
~~~~

# Building up some tools
- Load up `FootballStats.hs`
- `results2011` and `results2012` are of type `[GameResult]`
- By using standard library functions, we'll combine simple functions and work across a list

# Using Type Signatures
- Given the following types, how can we find out the highest scoring game?

~~~~
   -- From Data.List
   maximumBy :: (a -> a -> Ordering) -> [a] -> a
   
   -- From Data.Ord
   comparing :: Ord a => (b -> a) -> b -> b -> Ordering
~~~~

# Walk through
- I'm going to attempt this live, brace yourself.

<!--
  -- To save the day
  let totalGoals x = homeGoals x + awayGoals x
  maximumBy (comparing totalGoals) results2012
--> 

# Friction Free function gluing
- Lambdas - `(\x -> x + 1)` introduces a lambda of a single argument
- Partial Application `(+ 1) returns a new functions awaiting only one more argument`
- `(.)` composes functions (e.g. `not . excitingGame`) creates a new function
- `flip` alters returns a new function with the arguments flipped

# Finding Functions
- <http://www.haskell.org/hoogle/> allows you to search by type signature
- `Data.List` contains many common patterns for dealing with lists
- Think in terms of type signatures first and foremost

# Over to you
- What does the league table look like?

~~~~
     foldr :: (a -> b -> b) -> b -> [a] -> b
  
     -- In Data.List
     sortBy ::  (a -> a -> Ordering) -> [a] -> [a]
~~~~

# Generalizing
- If scores were counted at half-time, who would win the league?
- If yellow and red cards were counted as goals, who'd win?
- Which referee produced most red cards?

<!-- use up the rest of the session here -->

# What next?
- <http://book.realworldhaskell.org/> is an excellent book
- Use <http://www.haskell.org/hoogle/>  to search for functionality based on type signatures
- <http://www.fpcomplete.com> provides some great introductions
- Read "A Tutorial on the Universality and Expressiveness of Fold" to see deep patterns of abstraction captured
